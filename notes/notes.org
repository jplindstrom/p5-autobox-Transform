* Stuff
** DONE group_by default function
** DONE group_by_count
** DONE group_by_array
** DONE Remove special subs
**** DONE docs
** DONE Fix throw, remove lib
** DONE Release
** DONE Deprecate Array::Transform, point to new
** DONE map_by, grep_by, group_by hash key lookup
*** if first item is ref HASH
** grep_by - value
** [#A] group (group_count)
*** group_array
** sort
** find(sub), like grep
** find_by($method, $args, $value), like grep_by but first
** contains value
** compact - without undefined
** compactTrue - without false
** without - grep -v value
* Hash
** key_value($key, $new_key_name=$key) : ($new_key_name => $value) | { $new_key_name => $value }
*** exists
*** exists, undef
*** doesn't exist, undef
** key_value_if_exists($key, $new_key_name=$key) : ($new_key_name => $value) | { $new_key_name => $value }
** key_value_if_true($key, $new_key_name=$key) : ($new_key_name => $value) | { $new_key_name => $value }
** key_value_if_defined($key, $new_key_name=$key) : ($new_key_name => $value) | { $new_key_name => $value }
** map family
*** [#A] map($subref)
**** ($key, $value), $_ is value
**** return new key, new value (or die)
*** [#C] map_values($subref)
**** ($key, $value), $_ is value
**** return new value
*** map_values_by($accessor) maps values from one thing to another
**** (key, $value, $accessor_value), $_ is accessor_value
**** return new value
*** map_by ?
** grep family
*** [#A] grep($subref = true)
**** ($key, $value), $) is value
*** [#B] grep_defined
**** value is defined
*** grep_by($accessor, $args?, $subref = true)
**** 

